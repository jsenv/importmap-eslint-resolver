{
  "version": 3,
  "file": "jsenv_importmap_eslint_resolver.cjs",
  "sources": [
    "../src/internal/readImportMapFromFile.js",
    "../src/internal/importmap_resolution.js",
    "../src/resolver.js"
  ],
  "sourcesContent": [
    "import { readFileSync } from \"node:fs\"\n\nimport { normalizeImportMap } from \"@jsenv/importmap\"\nimport {\n  resolveUrl,\n  urlIsInsideOf,\n  urlToFileSystemPath,\n  ensureWindowsDriveLetter,\n} from \"@jsenv/filesystem\"\n\nexport const readImportMapFromFile = ({\n  logger,\n  projectDirectoryUrl,\n  importMapFileRelativeUrl,\n}) => {\n  if (typeof importMapFileRelativeUrl === \"undefined\") {\n    return null\n  }\n\n  if (typeof importMapFileRelativeUrl !== \"string\") {\n    throw new TypeError(\n      `importMapFileRelativeUrl must be a string, got ${importMapFileRelativeUrl}`,\n    )\n  }\n  const importMapFileUrl = applyUrlResolution(\n    importMapFileRelativeUrl,\n    projectDirectoryUrl,\n  )\n\n  if (!urlIsInsideOf(importMapFileUrl, projectDirectoryUrl)) {\n    logger.warn(`import map file is outside project.\n--- import map file ---\n${urlToFileSystemPath(importMapFileUrl)}\n--- project directory ---\n${urlToFileSystemPath(projectDirectoryUrl)}`)\n  }\n\n  let importMapFileBuffer\n  const importMapFilePath = urlToFileSystemPath(importMapFileUrl)\n  try {\n    importMapFileBuffer = readFileSync(importMapFilePath)\n  } catch (e) {\n    if (e && e.code === \"ENOENT\") {\n      logger.error(`importmap file not found at ${importMapFilePath}`)\n      return null\n    }\n    throw e\n  }\n\n  let importMap\n  try {\n    const importMapFileString = String(importMapFileBuffer)\n    importMap = JSON.parse(importMapFileString)\n  } catch (e) {\n    if (e && e.code === \"SyntaxError\") {\n      logger.error(`syntax error in importmap file\n--- error stack ---\n${e.stack}\n--- importmap file ---\n${importMapFilePath}`)\n      return null\n    }\n    throw e\n  }\n\n  return normalizeImportMap(importMap, projectDirectoryUrl)\n}\n\nconst applyUrlResolution = (specifier, importer) => {\n  const url = resolveUrl(specifier, importer)\n  return ensureWindowsDriveLetter(url, importer)\n}\n",
    "import { resolveImport } from \"@jsenv/importmap\"\n\nimport { readImportMapFromFile } from \"./readImportMapFromFile.js\"\n\nexport const applyImportMapResolution = (\n  specifier,\n  { logger, projectDirectoryUrl, importMapFileRelativeUrl, importDefaultExtension, importer },\n) => {\n  const importMap = readImportMapFromFile({\n    logger,\n    projectDirectoryUrl,\n    importMapFileRelativeUrl,\n  })\n\n  try {\n    return resolveImport({\n      specifier,\n      importer,\n      // by passing importMap to null resolveImport behaves\n      // almost like new URL(specifier, importer)\n      // we want to force the importmap resolution\n      // so that bare specifiers are considered unhandled\n      // even if there is no importmap file\n      importMap: importMap || {},\n      defaultExtension: importDefaultExtension,\n    })\n  } catch (e) {\n    if (e.message.includes(\"bare specifier\")) {\n      // this is an expected error and the file cannot be found\n      logger.debug(\"unmapped bare specifier\")\n      return null\n    }\n    // this is an unexpected error\n    throw e\n  }\n}\n",
    "// https://github.com/benmosher/eslint-plugin-import/blob/master/resolvers/node/index.js\n// https://github.com/benmosher/eslint-plugin-import/tree/master/resolvers\n// https://github.com/olalonde/eslint-import-resolver-babel-root-import\n\nimport { statSync, realpathSync } from \"node:fs\"\nimport { createLogger } from \"@jsenv/logger\"\nimport {\n  assertAndNormalizeDirectoryUrl,\n  ensureWindowsDriveLetter,\n  urlIsInsideOf,\n  urlToFileSystemPath,\n  fileSystemPathToUrl,\n} from \"@jsenv/filesystem\"\nimport { isSpecifierForNodeCoreModule } from \"@jsenv/importmap/src/isSpecifierForNodeCoreModule.js\"\n\nimport { applyImportMapResolution } from \"./internal/importmap_resolution.js\"\n\nexport const interfaceVersion = 2\n\nexport const resolve = (\n  source,\n  file,\n  {\n    logLevel,\n    projectDirectoryUrl,\n    importMapFileRelativeUrl,\n    caseSensitive = true,\n    ignoreOutside = false,\n    importDefaultExtension = false,\n    node = false,\n  },\n) => {\n  projectDirectoryUrl = assertAndNormalizeDirectoryUrl(projectDirectoryUrl)\n\n  const logger = createLogger({ logLevel })\n\n  logger.debug(`\nresolve import for project.\n--- specifier ---\n${source}\n--- importer ---\n${file}\n--- project directory path ---\n${urlToFileSystemPath(projectDirectoryUrl)}`)\n\n  if (node && isSpecifierForNodeCoreModule(source)) {\n    logger.debug(`-> native node module`)\n    return {\n      found: true,\n      path: null,\n    }\n  }\n\n  const specifier = source\n  const importer = String(fileSystemPathToUrl(file))\n\n  try {\n    let importUrl = applyImportMapResolution(specifier, {\n      logger,\n      projectDirectoryUrl,\n      importMapFileRelativeUrl,\n      importDefaultExtension,\n      importer,\n    })\n    if (!importUrl) {\n      return {\n        found: false,\n        path: null,\n      }\n    }\n\n    importUrl = ensureWindowsDriveLetter(importUrl, importer)\n\n    if (importUrl.startsWith(\"file://\")) {\n      return handleFileUrl(importUrl, {\n        logger,\n        projectDirectoryUrl,\n        ignoreOutside,\n        caseSensitive,\n      })\n    }\n\n    if (importUrl.startsWith(\"https://\") || importUrl.startsWith(\"http://\")) {\n      logger.debug(`-> consider found because of http(s) scheme ${importUrl}`)\n      return handleHttpUrl(importUrl)\n    }\n\n    if (importUrl.startsWith(\"node:\")) {\n      logger.warn(\n        `-> ${source} uses node scheme and node parameter is disabled`,\n      )\n    }\n\n    logger.debug(`-> consider not found because of scheme ${importUrl}`)\n    return handleRemainingUrl(importUrl)\n  } catch (e) {\n    logger.error(e.stack)\n    return {\n      found: false,\n      path: null,\n    }\n  }\n}\n\nconst handleFileUrl = (\n  importUrl,\n  { logger, projectDirectoryUrl, ignoreOutside, caseSensitive },\n) => {\n  const importFilePath = urlToFileSystemPath(importUrl)\n\n  if (ignoreOutside && !urlIsInsideOf(importUrl, projectDirectoryUrl)) {\n    logger.warn(`ignoring import outside project\n--- import file ---\n${importFilePath}\n--- project directory ---\n${urlToFileSystemPath(projectDirectoryUrl)}\n`)\n    return {\n      found: false,\n      path: importFilePath,\n    }\n  }\n\n  if (!pathLeadsToFile(importFilePath)) {\n    logger.debug(`-> file not found at ${importUrl}`)\n    return {\n      found: false,\n      path: importFilePath,\n    }\n  }\n\n  if (caseSensitive) {\n    const importFileRealPath = realpathSync.native(importFilePath)\n    if (importFileRealPath !== importFilePath) {\n      logger.warn(\n        `WARNING: file found at ${importFilePath} but would not be found on a case sensitive filesystem.\nThe real file path is ${importFileRealPath}.\nYou can choose to disable this warning by disabling case sensitivity.\nIf you do so keep in mind windows users would not find that file.`,\n      )\n      return {\n        found: false,\n        path: importFilePath,\n      }\n    }\n  }\n\n  logger.debug(`-> found file at ${importUrl}`)\n  return {\n    found: true,\n    path: importFilePath,\n  }\n}\n\nconst handleHttpUrl = () => {\n  // this api is synchronous we cannot check\n  // if a remote http/https file is available\n  return {\n    found: true,\n    path: null,\n  }\n}\n\nconst handleRemainingUrl = () => {\n  return {\n    found: false,\n    path: null,\n  }\n}\n\nconst pathLeadsToFile = (path) => {\n  try {\n    const stats = statSync(path)\n    return stats.isFile()\n  } catch (e) {\n    if (e && e.code === \"ENOENT\") {\n      return false\n    }\n    throw e\n  }\n}\n"
  ],
  "names": [
    "readImportMapFromFile",
    "logger",
    "projectDirectoryUrl",
    "importMapFileRelativeUrl",
    "TypeError",
    "importMapFileUrl",
    "applyUrlResolution",
    "urlIsInsideOf",
    "warn",
    "urlToFileSystemPath",
    "importMapFileBuffer",
    "importMapFilePath",
    "readFileSync",
    "e",
    "code",
    "error",
    "importMap",
    "importMapFileString",
    "String",
    "JSON",
    "parse",
    "stack",
    "normalizeImportMap",
    "specifier",
    "importer",
    "url",
    "resolveUrl",
    "ensureWindowsDriveLetter",
    "applyImportMapResolution",
    "importDefaultExtension",
    "resolveImport",
    "defaultExtension",
    "message",
    "includes",
    "debug",
    "interfaceVersion",
    "resolve",
    "source",
    "file",
    "logLevel",
    "caseSensitive",
    "ignoreOutside",
    "node",
    "assertAndNormalizeDirectoryUrl",
    "createLogger",
    "isSpecifierForNodeCoreModule",
    "found",
    "path",
    "fileSystemPathToUrl",
    "importUrl",
    "startsWith",
    "handleFileUrl",
    "handleHttpUrl",
    "handleRemainingUrl",
    "importFilePath",
    "pathLeadsToFile",
    "importFileRealPath",
    "realpathSync",
    "native",
    "stats",
    "statSync",
    "isFile"
  ],
  "mappings": "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"
}